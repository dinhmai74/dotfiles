ff2364a0be3d20e46cc69efb36afe9a5|file:///Users/dinhmai/.config/nvim/key-mapping.vim|150|20|v|vim
	space
26be38f413fb8bfec2c7b478fae42cad|file:///Users/dinhmai/.config/nvim/key-mapping.vim|111|25|V|vim
	"Recovery commands from history through FZF
	nmap <space>y :History:<CR>
60e63331ce5baf0763bd48831a6e7be3|file:///Users/dinhmai/.config/nvim/key-mapping.vim|140|1|V|vim
	nmap <space>e :CocCommand explorer<CR>
	" frame command
	nmap <space>f :CommentFrameHashDash ""<Left>
	let g:multi_cursor_select_all_word_key = '<space>n'
41e230a44df4b131461d69ca842834df|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|33|1|V|cs
	            var user = _accountService.Authenticate(model.Email, model.Password);
c579b29733ea0890d406043aa46c0058|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|131|18|V|cs
	                { 
	
	                }
0cf31b2c283ce3431794586df7b0996d|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|128|13|v|cs
	    
1dc5a7232e294d16ba8a8a050ce0c615|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|131|17|V|cs
	                return Ba
11d46cf4b49ac43e2af2ebe1d9021f23|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|129|17|V|cs
	                .apiRep
52edf377474f501b193c08921a380ae7|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|129|17|V|cs
	                apiRep.Data
d6c3114b6b15be17f050323b2bbf55e7|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|129|17|V|cs
	                apiRep.
4a1a1cbf7fcb515818b5f569aedb9642|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|130|19|V|cs
	                  .
630f571e14b3a7c5fd4f6ca501524448|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|129|17|V|cs
	                AppException
0ee637117fdb29c6d7ebc2be67361dd1|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|129|17|V|cs
	                AppException.
bc95dfc14146aa23e43f2ea7af04d310|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|190|1|v|cs
	            
ea6ea234b15f86bc27e1e26c6f1a95b5|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|6|1|V|cs
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
b17f6b580cf9c76cad39e95f53e592b9|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|6|1|V|cs
	using System.Threading.Tasks;
0a2853ac4ed48b2cea346c888a25241a|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|191|11|V|cs
	          fsa
8f0d7d0b80610e50ec0a69f3a064bc78|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|201|20|V|cs
	            if( hello ){
	              fdasjf
	            }
6464a0442f74cb63c68704222b4fa6bb|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|201|13|V|cs
	            if(dfasf)
688cb479519256e816cc85e936d1bf7f|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|200|13|V|cs
	            Ok()
3e45161ac2b68b42a7c957de00e9b903|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/AccountsController.cs|200|13|V|cs
	            Ok
dd998020d0babd396ab84049e48c929e|file:///Users/dinhmai/.SpaceVim.d/init.toml|32|1|V|conf
	[[layers]]
293cccc644962c03dacb38a2bfdf5370|file:///Users/dinhmai/.SpaceVim.d/init.toml|32|1|V|conf
	name = "denite"
01a61c31980741b4fdd18f71a54d6005|file:///Users/dinhmai/.SpaceVim.d/init.toml|35|1|V|conf
	name = 'shell'
4229d691b07b13341da53f17ab9f2416|untitled:3|1|1|V|
	hell
d3b2dd209706f5d37f4a95440c895a68|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/App.js|16|1|V|javascript
	const Should
b5ae266d2595adb98755e07f33ca6f2f|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/App.js|19|3|V|javascript
	  =>
ee7876cc940301acf4f78ea10221d2dd|file:///Users/dinhmai/.SpaceVim.d/init.toml|44|11|v|conf
	denite
0e5567ab4ba8ae1b3e0aebdc3196859b|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/screens/home-screen/home-screen.tsx|108|1|V|typescriptreact
	denitedenitedenite
32230c2268e31aa721dcde0d8a6aebb8|untitled:3|2|1|V|
	fsdafds
f0899c34bde1583b28a436ff0041cd70|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/screens/home-screen/home-screen.tsx|86|5|V|typescriptreact
	    fsa
3d8bdb3dd643ccabc2ad963d5900357a|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/screens/home-screen/home-screen.tsx|86|5|V|typescriptreact
	    df
e7557324ff7c9cefde4165646f001d13|file:///Users/dinhmai/.SpaceVim.d/init.toml|56|1|V|conf
	    'dart'
8306a18e5a1cd5162bdb6ff92aab1286|file:///Users/dinhmai/.SpaceVim.d/init.toml|49|1|v|conf
	# The lsp layer has to be enabled too. SpaceVim converts the configuration in the lsp layer and then passes it to coc.
	# You can put your language servers here.
	[[layers]] 
	  name = 'lsp'
	  filetypes = [
	    'c',
	    'cpp',
	  ]
	  [layers.override_cmd]
	    c = ['ccls', '--log-file=/tmp/ccls.log']
	    cpp = ['ccls', '--log-file=/tmp/ccls.log']
	
	
7bb0edd98f22430a03b67f853e83c2ca|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/app.tsx|132|8|V|typescriptreact
	        
43689afcf14e7661e35efe739a30199c|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/app.tsx|131|7|V|typescriptreact
	      set () {
e82f3e56d2a6718da3f068e5e6f91343|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/app.tsx|131|7|V|typescriptreact
	      }
e1266b294c2e40821e79bda2f56cc9a7|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/app.tsx|131|7|V|typescriptreact
	      set () {
	      }
32039ce38eda62ab4df5557757866361|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/app.tsx|131|7|V|typescriptreact
	      spyOn(object, '<`2:method`>')<|0|>;
0a7b6349180fd5764acd34bb98602fe1|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/app.tsx|131|20|V|typescriptreact
	      on('event_name', function(<`2:stream`>) {
	        <`3`>
	      });
20ad74a3b36e98305d36c7fbe3634f85|file:///Users/dinhmai/.SpaceVim.d/init.toml|26|16|v|conf
	SourceCodePro 
55b832ec80f9e53306578c577d22cdff|file:///Users/dinhmai/.SpaceVim.d/init.toml|26|16|v|conf
	Nerd 
6b147a8fb0cddd3996e40b6ea4baf7c0|file:///Users/dinhmai/.SpaceVim.d/init.toml|26|16|v|conf
	Font 
5d9b47bd3b65072e0d5daf55f01da086|file:///Users/dinhmai/.SpaceVim.d/init.toml|26|16|v|conf
	Mono
0544ed93c22d5e1c869010c4515a7401|untitled:9|1|1|V|
	fdsaf
0663613e225dc45b9ee601d3cd6b0fef|untitled:3|1|1|V|
	fdadf
a2a4072f2006541152e924a81f3bf1ac|file:///Users/dinhmai/.SpaceVim.d/init.toml|26|5|V|conf
	    guifont = "Fira Code:h15"
ecb46007f99539d3913332ae978751c6|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app.json|4|1|v|json
	    "slug": "bowie",
	    "pla
50e233152a792de076ee9c6abce47f70|file:///Users/dinhmai/workplace/project/dotnet/HollypocketBackend/HollypocketBackend/Controllers/ProductsController.cs|21|13|V|cs
	            _p
7c7cb46ad3209f3039cf6622cdba30a7|file:///Users/dinhmai/.config/nvim/coc-settings.json|12|5|V|jsonc
	    "c#",
d5c01f73a32c57b11b77f7c8a5f95098|file:///Users/dinhmai/.config/nvim/coc-settings.vim|17|1|V|vim
	  \ 'coc-yank', 
	  \ 'coc-omnisharp', 
69d3abdfe32d75cfa927f9c95edecca9|file:///Users/dinhmai/.config/nvim/key-mapping.vim|7|1|V|vim
	noremap <Leader>h :<C-u>split<CR>
ce4c4686b0becd2a21d133a07c99e8a8|file:///Users/dinhmai/.config/nvim/key-mapping.vim|7|1|V|vim
	noremap <Leader>v :<C-u>vsplit<CR>
937715d9f228690a912539b85874c9df|file:///Users/dinhmai/.config/nvim/init.vim|6|1|V|vim
	
	"*****************************************************************************
	"" Basic Settings
	"*****************************************************************************
	" general
	"" Encoding
	set encoding=utf-8
	set fileencoding=utf-8
	set fileencodings=utf-8
	" "" Fix backspace indent
	set backspace=indent,eol,start
	set listchars=tab:▸\ ,trail:· " Display extra whitespace characters
	set showcmd       " display incomplete commands
	set shell=zsh " Set bash as the prompt for Vim
	" "" Tabs. May be overridden by autocmd rules
	set tabstop=2
	set softtabstop=0
	set shiftwidth=2
	set termguicolors
	" " " always uses spaces instead of tab characters
	set expandtab
	
	" "" Enable hidden buffers
	set hidden
	" "" Fix backspace indent
	" "" Searching
	set hlsearch
	set incsearch
	set ignorecase
	set smartcase
	" " Mouse in visual modes
	set mouse=v
	" " Blink cursor on error instead of beeping
	set visualbell
	
	
	" set fileformats=unix,dos,mac
	" Yank and paste with the system clipboard
	" set clipboard=unnamed
	
	autocmd BufEnter * silent! :lcd%:p:h
	"*****************************************************************************
	"" Visual Settings
	"*****************************************************************************
	" syntax on
	set ruler
	set relativenumber
	let no_buffers_menu=1
	silent! colorscheme gruvbox
	set mousemodel=popup
	set guifont=Fira\ Code-Light:h1
	set t_Co=256
	set guioptions=egmrti
	" " set gfn=Monospace\ 10
	" "" Disable the blinking cursor.
	" " set gcr=a:blinkon0
	set scrolloff=3
	
	" "" Status bar
	set laststatus=2
	
	" "" Use modeline overrides
	set modeline
	set modelines=10
	
	set title
	set titleold="Terminal"
	set titlestring=%F
	set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
	" Search mappings: These will make it so that going to the next one in a
	" search will center on the line it's found in.
	nnoremap n nzzzv
	nnoremap N Nzzzv
	if exists("*fugitive#statusline")
	  set statusline+=%{fugitive#statusline()}
	endif
	
	
	" vim-airline
	let g:airline#extensions#branch#enabled = 1
	let g:airline#extensions#ale#enabled = 1
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tagbar#enabled = 1
	let g:airline_skip_empty_sections = 1
	
	" Whitespace
	set wrap
	set textwidth=0
	set wrapmargin=0
	set formatoptions=tcqrn1
	set tabstop=2
	set shiftwidth=2
	set softtabstop=2
	set expandtab
	set breakindent
	set noshiftround
	
	" Cursor motion
	set scrolloff=3
	set backspace=indent,eol,start
	set matchpairs+=<:> " use % to jump between pairs
	
	" Rendering
	set ttyfast
	
	let python_highlight_all=1
	syntax on
	
	"*****************************************************************************
	"" Abbreviations
	"*****************************************************************************
	"" no one is really happy until you have this shortcuts
	cnoreabbrev W! w!
	cnoreabbrev Q! q!
	cnoreabbrev q1 q!
	cnoreabbrev w1 w!
	cnoreabbrev Qall! qall!
	cnoreabbrev Wq wq
	cnoreabbrev Wa wa
	cnoreabbrev wQ wq
	cnoreabbrev WQ wq
	cnoreabbrev W w
	cnoreabbrev Q q
	cnoreabbrev Qall qall
	cabbrev t tabnew
	nnoremap ; :
	vnoremap ; :
	
	
	"*****************************************************************************
	"" Commands
	"*****************************************************************************
	" remove trailing whitespaces
	command! FixWhitespace :%s/\s\+$//e
	
	"*****************************************************************************
	"" Convenience variables
	"*****************************************************************************
	
	" Reload icons after init source
	if exists('g:loaded_webdevicons')
	  call webdevicons#refresh()
	endif
	
	
	"*****************************************************************************
	"" Autocmd Rules
	"*****************************************************************************
	"" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
	augroup vimrc-sync-fromstart
	  autocmd!
	  autocmd BufEnter * :syntax sync maxlines=200
	augroup END
	
	"" Remember cursor position
	augroup vimrc-remember-cursor-position
	  autocmd!
	  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
	augroup END
	
	"" txt
	augroup vimrc-wrapping
	  autocmd!
	  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
	augroup END
	
	"" make/cmake
	augroup vimrc-make-cmake
	  autocmd!
	  autocmd FileType make setlocal noexpandtab
	  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
	augroup END
	
	set autoread
	
	
	" ============================================================================ "
	" ===                      CUSTOM COLORSCHEME CHANGES                      === "
	" ============================================================================ "
	"
	" Add custom highlights in method that is executed every time a colorscheme is sourced
	" See https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f for details
	function! s:custom_jarvis_colors()
	  " coc.nvim color changes
	  colorscheme gruvbox
	  hi link CocErrorSign WarningMsg
	  hi link CocWarningSign Number
	  hi link CocInfoSign Type
	
	  " Make background transparent for many things
	  hi Normal ctermbg=NONE guibg=NONE
	  " hi NonText ctermbg=NONE guibg=NONE
	  hi LineNr ctermfg=NONE guibg=NONE
	  hi SignColumn ctermfg=NONE guibg=NONE
	  hi StatusLine guifg=#16252b guibg=#6699CC
	  hi StatusLineNC guifg=#16252b guibg=#16252b
	
	  " Try to hide vertical spit and end of buffer symbol
	  " hi VertSplit gui=NONE guifg=#17252c guibg=#17252c
	  " hi EndOfBuffer ctermbg=NONE ctermfg=NONE guibg=#17252c guifg=#17252c
	
	  " Make background color transparent for git changes
	  hi SignifySignAdd guibg=NONE
	  hi SignifySignDelete guibg=NONE
	  hi SignifySignChange guibg=NONE
	
	  " Highlight git change signs
	  hi SignifySignAdd guifg=#99c794
	  hi SignifySignDelete guifg=#ec5f67
	  hi SignifySignChange guifg=#c594c5
	endfunction
	
	" autocmd! ColorScheme * call TrailingSpaceHighlights()
	" autocmd! ColorScheme * call s:custom_jarvis_colors()
	" call s:custom_jarvis_colors()
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
	let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
	colorscheme gruvbox
	
	
287095b8f1154ed234c250f0ed4ff55a|file:///Users/dinhmai/.config/nvim/plugins.vim|58|33|V|vim
	Plug 'leafgarland/typescript-vim'
	Plug 'peitalin/vim-jsx-typescript'
e0d94232e0dc88e7b5830c2ca911d8d9|file:///Users/dinhmai/.config/nvim/init.vim|102|1|V|vim
	
	" Cursor motion
	set scrolloff=3
	set backspace=indent,eol,start
	set matchpairs+=<:> " use % to jump between pairs
	
	" Rendering
	set ttyfast
	
	let python_highlight_all=1
	syntax on
	
	"*****************************************************************************
	"" Abbreviations
	"*****************************************************************************
	"" no one is really happy until you have this shortcuts
	cnoreabbrev W! w!
	cnoreabbrev Q! q!
	cnoreabbrev q1 q!
	cnoreabbrev w1 w!
	cnoreabbrev Qall! qall!
	cnoreabbrev Wq wq
	cnoreabbrev Wa wa
	cnoreabbrev wQ wq
	cnoreabbrev WQ wq
	cnoreabbrev W w
	cnoreabbrev Q q
	cnoreabbrev Qall qall
	cabbrev t tabnew
	nnoremap ; :
	vnoremap ; :
	
	
	"*****************************************************************************
	"" Commands
	"*****************************************************************************
	" remove trailing whitespaces
	command! FixWhitespace :%s/\s\+$//e
	
	"*****************************************************************************
	"" Convenience variables
	"*****************************************************************************
	
	" Reload icons after init source
	if exists('g:loaded_webdevicons')
	  call webdevicons#refresh()
	endif
	
	
	"*****************************************************************************
	"" Autocmd Rules
	"*****************************************************************************
	"" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
	augroup vimrc-sync-fromstart
	  autocmd!
	  autocmd BufEnter * :syntax sync maxlines=200
	augroup END
	
	"" Remember cursor position
	augroup vimrc-remember-cursor-position
	  autocmd!
	  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
	augroup END
	
	"" txt
	augroup vimrc-wrapping
	  autocmd!
	  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
	augroup END
	
	"" make/cmake
	augroup vimrc-make-cmake
	  autocmd!
	  autocmd FileType make setlocal noexpandtab
	  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
	augroup END
	
	set autoread
	
	
	" ============================================================================ "
	" ===                      CUSTOM COLORSCHEME CHANGES                      === "
	" ============================================================================ "
	"
	" Add custom highlights in method that is executed every time a colorscheme is sourced
	" See https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f for details
	" function! s:custom_jarvis_colors()
	  " " coc.nvim color changes
	  " colorscheme gruvbox
	  " hi link CocErrorSign WarningMsg
	  " hi link CocWarningSign Number
	  " hi link CocInfoSign Type
	
	  " " Make background transparent for many things
	  " hi Normal ctermbg=NONE guibg=NONE
	  " " hi NonText ctermbg=NONE guibg=NONE
	  " hi LineNr ctermfg=NONE guibg=NONE
	  " hi SignColumn ctermfg=NONE guibg=NONE
	  " hi StatusLine guifg=#16252b guibg=#6699CC
	  " hi StatusLineNC guifg=#16252b guibg=#16252b
	
	  " " Try to hide vertical spit and end of buffer symbol
	  " " hi VertSplit gui=NONE guifg=#17252c guibg=#17252c
	  " " hi EndOfBuffer ctermbg=NONE ctermfg=NONE guibg=#17252c guifg=#17252c
	
	  " " Make background color transparent for git changes
	  " hi SignifySignAdd guibg=NONE
	  " hi SignifySignDelete guibg=NONE
	  " hi SignifySignChange guibg=NONE
	
	  " " Highlight git change signs
	  " hi SignifySignAdd guifg=#99c794
	  " hi SignifySignDelete guifg=#ec5f67
	  " hi SignifySignChange guifg=#c594c5
	" endfunction
	
	" autocmd! ColorScheme * call TrailingSpaceHighlights()
	" autocmd! ColorScheme * call s:custom_jarvis_colors()
	" call s:custom_jarvis_colors()
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
	let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
	" colorscheme gruvbox
72a2d81eba19fa68e29f68f9b5163658|untitled:1|2|1|V|
	Ppplug 'leafgarland/typescript-vim'
d38b24ef60f8bb96a3c49161ad9d8797|untitled:1|2|1|V|
	Plug 'peitalin/vim-jsx-typescript'
b642cce5263bd361843272837fb99a78|file:///Users/dinhmai/.config/nvim/init.vim|91|1|V|vim
	" Whitespace
	set wrap
	set textwidth=0
	set wrapmargin=0
	set formatoptions=tcqrn1
	set tabstop=2
	set shiftwidth=2
	set softtabstop=2
	set expandtab
	set breakindent
	set noshiftround
	
	" Cursor motion
	set scrolloff=3
	set backspace=indent,eol,start
	set matchpairs+=<:> " use % to jump between pairs
	
	" Rendering
	set ttyfast
	
	let python_highlight_all=1
	syntax on
	
	"*****************************************************************************
	"" Abbreviations
	"*****************************************************************************
	"" no one is really happy until you have this shortcuts
	cnoreabbrev W! w!
	cnoreabbrev Q! q!
	cnoreabbrev q1 q!
	cnoreabbrev w1 w!
	cnoreabbrev Qall! qall!
	cnoreabbrev Wq wq
	cnoreabbrev Wa wa
	cnoreabbrev wQ wq
	cnoreabbrev WQ wq
	cnoreabbrev W w
	cnoreabbrev Q q
	cnoreabbrev Qall qall
	cabbrev t tabnew
	nnoremap ; :
	vnoremap ; :
	
	
	"*****************************************************************************
	"" Commands
	"*****************************************************************************
	" remove trailing whitespaces
	command! FixWhitespace :%s/\s\+$//e
	
	"*****************************************************************************
	"" Convenience variables
	"*****************************************************************************
	
	" Reload icons after init source
	if exists('g:loaded_webdevicons')
	  call webdevicons#refresh()
	endif
	
	
	"*****************************************************************************
	"" Autocmd Rules
	"*****************************************************************************
	"" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
	augroup vimrc-sync-fromstart
	  autocmd!
	  autocmd BufEnter * :syntax sync maxlines=200
	augroup END
	
	"" Remember cursor position
	augroup vimrc-remember-cursor-position
	  autocmd!
	  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
	augroup END
	
	"" txt
	augroup vimrc-wrapping
	  autocmd!
	  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
	augroup END
	
	"" make/cmake
	augroup vimrc-make-cmake
	  autocmd!
	  autocmd FileType make setlocal noexpandtab
	  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
	augroup END
	
	set autoread
	
	
	" ============================================================================ "
	" ===                      CUSTOM COLORSCHEME CHANGES                      === "
	" ============================================================================ "
	"
	" Add custom highlights in method that is executed every time a colorscheme is sourced
	" See https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f for details
	" function! s:custom_jarvis_colors()
	  " " coc.nvim color changes
	  " colorscheme gruvbox
	  " hi link CocErrorSign WarningMsg
	  " hi link CocWarningSign Number
	  " hi link CocInfoSign Type
	
	  " " Make background transparent for many things
	  " hi Normal ctermbg=NONE guibg=NONE
	  " " hi NonText ctermbg=NONE guibg=NONE
	  " hi LineNr ctermfg=NONE guibg=NONE
	  " hi SignColumn ctermfg=NONE guibg=NONE
	  " hi StatusLine guifg=#16252b guibg=#6699CC
	  " hi StatusLineNC guifg=#16252b guibg=#16252b
	
	  " " Try to hide vertical spit and end of buffer symbol
	  " " hi VertSplit gui=NONE guifg=#17252c guibg=#17252c
	  " " hi EndOfBuffer ctermbg=NONE ctermfg=NONE guibg=#17252c guifg=#17252c
	
	  " " Make background color transparent for git changes
	  " hi SignifySignAdd guibg=NONE
	  " hi SignifySignDelete guibg=NONE
	  " hi SignifySignChange guibg=NONE
	
	  " " Highlight git change signs
	  " hi SignifySignAdd guifg=#99c794
	  " hi SignifySignDelete guifg=#ec5f67
	  " hi SignifySignChange guifg=#c594c5
	" endfunction
	
	" autocmd! ColorScheme * call TrailingSpaceHighlights()
	" autocmd! ColorScheme * call s:custom_jarvis_colors()
	" call s:custom_jarvis_colors()
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
	let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
	" colorscheme gruvbox
aa57ffa52401068fa5eb16be353ee284|file:///Users/dinhmai/.config/nvim/init.vim|82|1|V|vim
	
	
	" vim-airline
	let g:airline#extensions#branch#enabled = 1
	let g:airline#extensions#ale#enabled = 1
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tagbar#enabled = 1
	let g:airline_skip_empty_sections = 1
	
	" Whitespace
	set wrap
	set textwidth=0
	set wrapmargin=0
	set formatoptions=tcqrn1
	set tabstop=2
	set shiftwidth=2
	set softtabstop=2
	set expandtab
	set breakindent
	set noshiftround
	
	" Cursor motion
	set scrolloff=3
	set backspace=indent,eol,start
	set matchpairs+=<:> " use % to jump between pairs
	
	" Rendering
	set ttyfast
	
	let python_highlight_all=1
	syntax on
	
	"*****************************************************************************
	"" Abbreviations
	"*****************************************************************************
	"" no one is really happy until you have this shortcuts
	cnoreabbrev W! w!
	cnoreabbrev Q! q!
	cnoreabbrev q1 q!
	cnoreabbrev w1 w!
	cnoreabbrev Qall! qall!
	cnoreabbrev Wq wq
	cnoreabbrev Wa wa
	cnoreabbrev wQ wq
	cnoreabbrev WQ wq
	cnoreabbrev W w
	cnoreabbrev Q q
	cnoreabbrev Qall qall
	cabbrev t tabnew
	nnoremap ; :
	vnoremap ; :
	
	
	"*****************************************************************************
	"" Commands
	"*****************************************************************************
	" remove trailing whitespaces
	command! FixWhitespace :%s/\s\+$//e
	
	"*****************************************************************************
	"" Convenience variables
	"*****************************************************************************
	
	" Reload icons after init source
	if exists('g:loaded_webdevicons')
	  call webdevicons#refresh()
	endif
	
	
	"*****************************************************************************
	"" Autocmd Rules
	"*****************************************************************************
	"" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
	augroup vimrc-sync-fromstart
	  autocmd!
	  autocmd BufEnter * :syntax sync maxlines=200
	augroup END
	
	"" Remember cursor position
	augroup vimrc-remember-cursor-position
	  autocmd!
	  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
	augroup END
	
	"" txt
	augroup vimrc-wrapping
	  autocmd!
	  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
	augroup END
	
	"" make/cmake
	augroup vimrc-make-cmake
	  autocmd!
	  autocmd FileType make setlocal noexpandtab
	  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
	augroup END
	
	set autoread
	
	
	" ============================================================================ "
	" ===                      CUSTOM COLORSCHEME CHANGES                      === "
	" ============================================================================ "
	"
	" Add custom highlights in method that is executed every time a colorscheme is sourced
	" See https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f for details
	" function! s:custom_jarvis_colors()
	  " " coc.nvim color changes
	  " colorscheme gruvbox
	  " hi link CocErrorSign WarningMsg
	  " hi link CocWarningSign Number
	  " hi link CocInfoSign Type
	
	  " " Make background transparent for many things
	  " hi Normal ctermbg=NONE guibg=NONE
	  " " hi NonText ctermbg=NONE guibg=NONE
	  " hi LineNr ctermfg=NONE guibg=NONE
	  " hi SignColumn ctermfg=NONE guibg=NONE
	  " hi StatusLine guifg=#16252b guibg=#6699CC
	  " hi StatusLineNC guifg=#16252b guibg=#16252b
	
	  " " Try to hide vertical spit and end of buffer symbol
	  " " hi VertSplit gui=NONE guifg=#17252c guibg=#17252c
	  " " hi EndOfBuffer ctermbg=NONE ctermfg=NONE guibg=#17252c guifg=#17252c
	
	  " " Make background color transparent for git changes
	  " hi SignifySignAdd guibg=NONE
	  " hi SignifySignDelete guibg=NONE
	  " hi SignifySignChange guibg=NONE
	
	  " " Highlight git change signs
	  " hi SignifySignAdd guifg=#99c794
	  " hi SignifySignDelete guifg=#ec5f67
	  " hi SignifySignChange guifg=#c594c5
	" endfunction
	
	" autocmd! ColorScheme * call TrailingSpaceHighlights()
	" autocmd! ColorScheme * call s:custom_jarvis_colors()
	" call s:custom_jarvis_colors()
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
	let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
	" colorscheme gruvbox
fbb8c923faed7ce686d32767c85d2667|file:///Users/dinhmai/.config/nvim/init.vim|83|1|v|vim
	
	" vim-airline
	let g:airline#extensions#branch#enabled = 1
	let g:airline#extensions#ale#enabled = 1
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tagbar#enabled = 1
	let g:airline_skip_empty_sections = 1
	
	
db5c5f56deb55655154ce64b2eedeabe|file:///Users/dinhmai/.config/nvim/init.vim|45|1|V|vim
	
	autocmd BufEnter * silent! :lcd%:p:h
	"*****************************************************************************
	"" Visual Settings
	"*****************************************************************************
	" syntax on
	set ruler
	set relativenumber
	let no_buffers_menu=1
	silent! colorscheme gruvbox
	set mousemodel=popup
	set guifont=Fira\ Code-Light:h1
	set t_Co=256
	" set guioptions=egmrti
	" " set gfn=Monospace\ 10
	" "" Disable the blinking cursor.
	" " set gcr=a:blinkon0
	set scrolloff=3
	
	" "" Status bar
	set laststatus=2
	
	" "" Use modeline overrides
	set modeline
	set modelines=10
	
	set title
	set titleold="Terminal"
	set titlestring=%F
	set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
	" Search mappings: These will make it so that going to the next one in a
	" search will center on the line it's found in.
	nnoremap n nzzzv
	nnoremap N Nzzzv
	if exists("*fugitive#statusline")
	  set statusline+=%{fugitive#statusline()}
	endif
	
	" Whitespace
	set wrap
	set textwidth=0
	set wrapmargin=0
	set formatoptions=tcqrn1
	set tabstop=2
	set shiftwidth=2
	set softtabstop=2
	set expandtab
	set breakindent
	set noshiftround
	
	" Cursor motion
	set scrolloff=3
	set backspace=indent,eol,start
	set matchpairs+=<:> " use % to jump between pairs
	
	" Rendering
	set ttyfast
	
	let python_highlight_all=1
	syntax on
	
	"*****************************************************************************
	"" Abbreviations
	"*****************************************************************************
	"" no one is really happy until you have this shortcuts
	cnoreabbrev W! w!
	cnoreabbrev Q! q!
	cnoreabbrev q1 q!
	cnoreabbrev w1 w!
	cnoreabbrev Qall! qall!
	cnoreabbrev Wq wq
	cnoreabbrev Wa wa
	cnoreabbrev wQ wq
	cnoreabbrev WQ wq
	cnoreabbrev W w
	cnoreabbrev Q q
	cnoreabbrev Qall qall
	cabbrev t tabnew
	nnoremap ; :
	vnoremap ; :
	
	
	"*****************************************************************************
	"" Commands
	"*****************************************************************************
	" remove trailing whitespaces
	command! FixWhitespace :%s/\s\+$//e
	
	"*****************************************************************************
	"" Convenience variables
	"*****************************************************************************
	
	" Reload icons after init source
	if exists('g:loaded_webdevicons')
	  call webdevicons#refresh()
	endif
	
	
	"*****************************************************************************
	"" Autocmd Rules
	"*****************************************************************************
	"" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
	augroup vimrc-sync-fromstart
	  autocmd!
	  autocmd BufEnter * :syntax sync maxlines=200
	augroup END
	
	"" Remember cursor position
	augroup vimrc-remember-cursor-position
	  autocmd!
	  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
	augroup END
	
	"" txt
	augroup vimrc-wrapping
	  autocmd!
	  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
	augroup END
	
	"" make/cmake
	augroup vimrc-make-cmake
	  autocmd!
	  autocmd FileType make setlocal noexpandtab
	  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
	augroup END
	
	set autoread
	
	
	" ============================================================================ "
	" ===                      CUSTOM COLORSCHEME CHANGES                      === "
	" ============================================================================ "
	"
	" Add custom highlights in method that is executed every time a colorscheme is sourced
	" See https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f for details
	" function! s:custom_jarvis_colors()
	  " " coc.nvim color changes
	  " colorscheme gruvbox
	  " hi link CocErrorSign WarningMsg
	  " hi link CocWarningSign Number
	  " hi link CocInfoSign Type
	
	  " " Make background transparent for many things
	  " hi Normal ctermbg=NONE guibg=NONE
	  " " hi NonText ctermbg=NONE guibg=NONE
	  " hi LineNr ctermfg=NONE guibg=NONE
	  " hi SignColumn ctermfg=NONE guibg=NONE
	  " hi StatusLine guifg=#16252b guibg=#6699CC
	  " hi StatusLineNC guifg=#16252b guibg=#16252b
	
	  " " Try to hide vertical spit and end of buffer symbol
	  " " hi VertSplit gui=NONE guifg=#17252c guibg=#17252c
	  " " hi EndOfBuffer ctermbg=NONE ctermfg=NONE guibg=#17252c guifg=#17252c
	
	  " " Make background color transparent for git changes
	  " hi SignifySignAdd guibg=NONE
	  " hi SignifySignDelete guibg=NONE
	  " hi SignifySignChange guibg=NONE
	
	  " " Highlight git change signs
	  " hi SignifySignAdd guifg=#99c794
	  " hi SignifySignDelete guifg=#ec5f67
	  " hi SignifySignChange guifg=#c594c5
	" endfunction
	
	" autocmd! ColorScheme * call TrailingSpaceHighlights()
	" autocmd! ColorScheme * call s:custom_jarvis_colors()
	" call s:custom_jarvis_colors()
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
	let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
	" colorscheme gruvbox
f0747ffef483515a4304f377ea406655|file:///Users/dinhmai/.config/nvim/init.vim|57|1|V|vim
	set t_Co=256
	" set guioptions=egmrti
	" " set gfn=Monospace\ 10
	" "" Disable the blinking cursor.
	" " set gcr=a:blinkon0
	set scrolloff=3
	
	" "" Status bar
	set laststatus=2
	
	" "" Use modeline overrides
	set modeline
	set modelines=10
	
	set title
	set titleold="Terminal"
	set titlestring=%F
	set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
	" Search mappings: These will make it so that going to the next one in a
	" search will center on the line it's found in.
	nnoremap n nzzzv
	nnoremap N Nzzzv
	if exists("*fugitive#statusline")
	  set statusline+=%{fugitive#statusline()}
	endif
	
	" Whitespace
	set wrap
	set textwidth=0
	set wrapmargin=0
	set formatoptions=tcqrn1
	set tabstop=2
	set shiftwidth=2
	set softtabstop=2
	set expandtab
	set breakindent
	set noshiftround
	
	" Cursor motion
	set scrolloff=3
	set backspace=indent,eol,start
	set matchpairs+=<:> " use % to jump between pairs
	
	" Rendering
	set ttyfast
	
	let python_highlight_all=1
	syntax on
	
	"*****************************************************************************
	"" Abbreviations
	"*****************************************************************************
	"" no one is really happy until you have this shortcuts
	cnoreabbrev W! w!
	cnoreabbrev Q! q!
	cnoreabbrev q1 q!
	cnoreabbrev w1 w!
	cnoreabbrev Qall! qall!
	cnoreabbrev Wq wq
	cnoreabbrev Wa wa
	cnoreabbrev wQ wq
	cnoreabbrev WQ wq
	cnoreabbrev W w
	cnoreabbrev Q q
	cnoreabbrev Qall qall
	cabbrev t tabnew
	nnoremap ; :
	vnoremap ; :
	
	
	"*****************************************************************************
	"" Commands
	"*****************************************************************************
	" remove trailing whitespaces
	command! FixWhitespace :%s/\s\+$//e
	
	"*****************************************************************************
	"" Convenience variables
	"*****************************************************************************
	
	" Reload icons after init source
	if exists('g:loaded_webdevicons')
	  call webdevicons#refresh()
	endif
	
	
	"*****************************************************************************
	"" Autocmd Rules
	"*****************************************************************************
	"" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
	augroup vimrc-sync-fromstart
	  autocmd!
	  autocmd BufEnter * :syntax sync maxlines=200
	augroup END
	
	"" Remember cursor position
	augroup vimrc-remember-cursor-position
	  autocmd!
	  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
	augroup END
	
	"" txt
	augroup vimrc-wrapping
	  autocmd!
	  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
	augroup END
	
	"" make/cmake
	augroup vimrc-make-cmake
	  autocmd!
	  autocmd FileType make setlocal noexpandtab
	  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
	augroup END
	
	set autoread
	
	
	" ============================================================================ "
	" ===                      CUSTOM COLORSCHEME CHANGES                      === "
	" ============================================================================ "
	"
	" Add custom highlights in method that is executed every time a colorscheme is sourced
	" See https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f for details
	" function! s:custom_jarvis_colors()
	  " " coc.nvim color changes
	  " colorscheme gruvbox
	  " hi link CocErrorSign WarningMsg
	  " hi link CocWarningSign Number
	  " hi link CocInfoSign Type
	
	  " " Make background transparent for many things
	  " hi Normal ctermbg=NONE guibg=NONE
	  " " hi NonText ctermbg=NONE guibg=NONE
	  " hi LineNr ctermfg=NONE guibg=NONE
	  " hi SignColumn ctermfg=NONE guibg=NONE
	  " hi StatusLine guifg=#16252b guibg=#6699CC
	  " hi StatusLineNC guifg=#16252b guibg=#16252b
	
	  " " Try to hide vertical spit and end of buffer symbol
	  " " hi VertSplit gui=NONE guifg=#17252c guibg=#17252c
	  " " hi EndOfBuffer ctermbg=NONE ctermfg=NONE guibg=#17252c guifg=#17252c
	
	  " " Make background color transparent for git changes
	  " hi SignifySignAdd guibg=NONE
	  " hi SignifySignDelete guibg=NONE
	  " hi SignifySignChange guibg=NONE
	
	  " " Highlight git change signs
	  " hi SignifySignAdd guifg=#99c794
	  " hi SignifySignDelete guifg=#ec5f67
	  " hi SignifySignChange guifg=#c594c5
	" endfunction
	
	" autocmd! ColorScheme * call TrailingSpaceHighlights()
	" autocmd! ColorScheme * call s:custom_jarvis_colors()
	" call s:custom_jarvis_colors()
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
	let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
	" colorscheme gruvbox
73be252ca82217b1458a25e6b4e99f15|file:///Users/dinhmai/.config/nvim/init.vim|54|1|v|vim
	silent
6daa64c60bfde7da2069929aa18933dc|file:///Users/dinhmai/.config/nvim/init.vim|55|1|V|vim
	" set mousemodel=popup
	set guifont=Fira\ Code-Light:h1
	set t_Co=256
	" set guioptions=egmrti
	" " set gfn=Monospace\ 10
	" "" Disable the blinking cursor.
	" " set gcr=a:blinkon0
	set scrolloff=3
	
	" "" Status bar
	set laststatus=2
	
	" "" Use modeline overrides
	set modeline
	set modelines=10
	
	set title
	set titleold="Terminal"
	set titlestring=%F
	set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
	" Search mappings: These will make it so that going to the next one in a
	" search will center on the line it's found in.
	nnoremap n nzzzv
	nnoremap N Nzzzv
	if exists("*fugitive#statusline")
	  set statusline+=%{fugitive#statusline()}
	endif
	
	" Whitespace
	set wrap
	set textwidth=0
	set wrapmargin=0
	set formatoptions=tcqrn1
	set tabstop=2
	set shiftwidth=2
	set softtabstop=2
	set expandtab
	set breakindent
	set noshiftround
	
	" Cursor motion
	set scrolloff=3
	set backspace=indent,eol,start
	set matchpairs+=<:> " use % to jump between pairs
	
	" Rendering
	set ttyfast
	
	let python_highlight_all=1
	syntax on
	
	"*****************************************************************************
	"" Abbreviations
	"*****************************************************************************
	"" no one is really happy until you have this shortcuts
	cnoreabbrev W! w!
	cnoreabbrev Q! q!
	cnoreabbrev q1 q!
	cnoreabbrev w1 w!
	cnoreabbrev Qall! qall!
	cnoreabbrev Wq wq
	cnoreabbrev Wa wa
	cnoreabbrev wQ wq
	cnoreabbrev WQ wq
	cnoreabbrev W w
	cnoreabbrev Q q
	cnoreabbrev Qall qall
	cabbrev t tabnew
	nnoremap ; :
	vnoremap ; :
	
	
	"*****************************************************************************
	"" Commands
	"*****************************************************************************
	" remove trailing whitespaces
	command! FixWhitespace :%s/\s\+$//e
	
	"*****************************************************************************
	"" Convenience variables
	"*****************************************************************************
	
	" Reload icons after init source
	if exists('g:loaded_webdevicons')
	  call webdevicons#refresh()
	endif
	
	
	"*****************************************************************************
	"" Autocmd Rules
	"*****************************************************************************
	"" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
	augroup vimrc-sync-fromstart
	  autocmd!
	  autocmd BufEnter * :syntax sync maxlines=200
	augroup END
	
	"" Remember cursor position
	augroup vimrc-remember-cursor-position
	  autocmd!
	  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
	augroup END
	
	"" txt
	augroup vimrc-wrapping
	  autocmd!
	  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
	augroup END
	
	"" make/cmake
	augroup vimrc-make-cmake
	  autocmd!
	  autocmd FileType make setlocal noexpandtab
	  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
	augroup END
	
	set autoread
	
	
	" ============================================================================ "
	" ===                      CUSTOM COLORSCHEME CHANGES                      === "
	" ============================================================================ "
	"
	" Add custom highlights in method that is executed every time a colorscheme is sourced
	" See https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f for details
	" function! s:custom_jarvis_colors()
	  " " coc.nvim color changes
	  " colorscheme gruvbox
	  " hi link CocErrorSign WarningMsg
	  " hi link CocWarningSign Number
	  " hi link CocInfoSign Type
	
	  " " Make background transparent for many things
	  " hi Normal ctermbg=NONE guibg=NONE
	  " " hi NonText ctermbg=NONE guibg=NONE
	  " hi LineNr ctermfg=NONE guibg=NONE
	  " hi SignColumn ctermfg=NONE guibg=NONE
	  " hi StatusLine guifg=#16252b guibg=#6699CC
	  " hi StatusLineNC guifg=#16252b guibg=#16252b
	
	  " " Try to hide vertical spit and end of buffer symbol
	  " " hi VertSplit gui=NONE guifg=#17252c guibg=#17252c
	  " " hi EndOfBuffer ctermbg=NONE ctermfg=NONE guibg=#17252c guifg=#17252c
	
	  " " Make background color transparent for git changes
	  " hi SignifySignAdd guibg=NONE
	  " hi SignifySignDelete guibg=NONE
	  " hi SignifySignChange guibg=NONE
	
	  " " Highlight git change signs
	  " hi SignifySignAdd guifg=#99c794
	  " hi SignifySignDelete guifg=#ec5f67
	  " hi SignifySignChange guifg=#c594c5
	" endfunction
	
	" autocmd! ColorScheme * call TrailingSpaceHighlights()
	" autocmd! ColorScheme * call s:custom_jarvis_colors()
	" call s:custom_jarvis_colors()
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
	let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
	" colorscheme gruvbox
cb04fee2673ee8ed2c86c0805b037219|file:///Users/dinhmai/.config/nvim/init.vim|5|1|v|vim
	let g:rainbow_active = 1
	
	"*****************************************************************************
	"" Basic Settings
	"*****************************************************************************
	" general
	"" Encoding
	set encoding=utf-8
	set fileencoding=utf-8
	set fileencodings=utf-8
	" "" Fix backspace indent
	set backspace=indent,eol,start
	set listchars=tab:▸\ ,trail:· " Display extra whitespace characters
	set showcmd       " display incomplete commands
	set shell=zsh " Set bash as the prompt for Vim
	" "" Tabs. May be overridden by autocmd rules
	set tabstop=2
	set softtabstop=0
	set shiftwidth=2
	set termguicolors
	" " " always uses spaces instead of tab characters
	set expandtab
	
	" "" Enable hidden buffers
	set hidden
	" "" Fix backspace indent
	" "" Searching
	set hlsearch
	set incsearch
	set ignorecase
	set smartcase
	" " Mouse in visual modes
	set mouse=v
	" " Blink cursor on error instead of beeping
	s
6c7998c7d2a5b108f758009143791bf9|file:///Users/dinhmai/.config/nvim/init.vim|5|1|V|vim
	et visualbell
b79b517ce8cd6cf7c4ed8238ae4a3821|untitled:1|1|1|V|
	fasf
bad5558dfbcd75fec80385bab712ea58|file:///Users/dinhmai/.config/nvim/key-mapping.vim|67|30|V|vim
	nnoremap <silent> <leader>b :Buffers<CR>
	nnoremap <silent> <leader>e :GFiles<CR>
4a4bf58b9ede32ef80dd815cc2fbaefd|file:///Users/dinhmai/.config/nvim/key-mapping.vim|114|1|V|vim
	nnoremap <silent> <leader>e :GFiles<CR>
c444858e0aaeb727da73d2eae62321ad|file:///Users/dinhmai/.config/nvim/key-mapping.vim|115|20|v|vim
	leader
40fd0682f2ab407e29ae966e22a0cf97|file:///Users/dinhmai/.config/nvim/init.vim|215|1|V|vim
	colorscheme onedark
dfa56bb7a067df9cd0484599320f71f1|file:///Users/dinhmai/.config/nvim/init.vim|217|22|v|vim
	onehalfdark
c6baf234a7b845634d8458b4f8be50de|file:///Users/dinhmai/.config/nvim/init.vim|217|1|V|vim
	let g:airline_theme='one'
01c79e21890bdc97b45d78fe90b91b93|file:///Users/dinhmai/.config/nvim/init.vim|216|1|V|vim
	colorscheme onehalfdark
a23df0e09456dab2ee1a8c2723a7b3d5|file:///Users/dinhmai/.config/nvim/plugins.vim|41|1|V|vim
	Plug 'sonph/onehalf'
2ac43aa43bf473f9a9c09b4b608619d3|file:///Users/dinhmai/.config/nvim/init.vim|217|20|v|vim
	light
6f159a445b1c75c5ef501e96d65aff9a|file:///Users/dinhmai/.config/nvim/plugins.vim|41|1|V|vim
	Plug 'sonph/onehalf', {'rtp': 'vim/'}
1e7082f20e6a3d6336a4444845b24d9c|file:///Users/dinhmai/.config/nvim/plugins.vim|41|7|v|vim
	sonph/onehalf
d34f464cd8334e19775bb09b6a6d1046|file:///Users/dinhmai/.config/nvim/init.vim|217|1|V|vim
	" colorscheme onehalfdark
c6532f4a664df4209dfcd0c7a5a4b038|file:///Users/dinhmai/.config/nvim/init.vim|217|16|v|vim
	halfdark
6f30a87d28e54d72e9d3c593474125a0|file:///Users/dinhmai/.config/nvim/plugins.vim|41|1|V|vim
	Plug 'rakr/vim-one'
b57dcf1acb84d2cfa1b7dfd88c8a461d|file:///Users/dinhmai/.config/nvim/init.vim|218|1|V|vim
	let g:airline_theme='onedark'
194534de1912ade9191dd98f33823475|file:///Users/dinhmai/.config/nvim/init.vim|217|1|V|vim
	colorscheme neodark
23b6c207a9d9c28165cd02e7916db8d0|file:///Users/dinhmai/.config/nvim/plugins.vim|54|1|V|vim
	" Syntax highlighting for javascript libraries
	Plug 'othree/javascript-libraries-syntax.vim'
116ea14758bd08047179b4ac2093e289|file:///Users/dinhmai/.config/nvim/init.vim|12|1|V|vim
	set encoding=utf-8
	set fileencoding=utf-8
	set fileencodings=utf-8
	" "" Fix backspace indent
	set backspace=indent,eol,start
	set listchars=tab:▸\ ,trail:· " Display extra whitespace characters
	set showcmd       " display incomplete commands
	set shell=zsh " Set bash as the prompt for Vim
	" "" Tabs. May be overridden by autocmd rules
	set tabstop=2
	set softtabstop=0
	set shiftwidth=2
	set termguicolors
	" " " always uses spaces instead of tab characters
	set expandtab
	
	" "" Enable hidden buffers
	set hidden
	" "" Fix backspace indent
	" "" Searching
	set hlsearch
	set incsearch
	set ignorecase
	set smartcase
	" " Mouse in visual modes
	set mouse=v
	" " Blink cursor on error instead of beeping
	set visualbell
	
	
	" set fileformats=unix,dos,mac
	" Yank and paste with the system clipboard
	" set clipboard=unnamed
	
	autocmd BufEnter * silent! :lcd%:p:h
	"*****************************************************************************
	"" Visual Settings
	"*****************************************************************************
	" syntax on
	set ruler
	set relativenumber
	let no_buffers_menu=1
	colorscheme gruvbox
	" colorscheme onedark
	" set mousemodel=popup
	set guifont=Fira\ Code-Light:h1
	set t_Co=256
	" set guioptions=egmrti
	" " set gfn=Monospace\ 10
	" "" Disable the blinking cursor.
	" " set gcr=a:blinkon0
	set scrolloff=3
	
	" "" Status bar
	set laststatus=2
	
	" "" Use modeline overrides
	set modeline
	set modelines=10
	
	set title
	set titleold="Terminal"
	set titlestring=%F
	set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
	" Search mappings: These will make it so that going to the next one in a
	" search will center on the line it's found in.
	nnoremap n nzzzv
	nnoremap N Nzzzv
	if exists("*fugitive#statusline")
	  set statusline+=%{fugitive#statusline()}
	endif
	
	" Whitespace
	set wrap
	set textwidth=0
	set wrapmargin=0
	set formatoptions=tcqrn1
	set tabstop=2
	set shiftwidth=2
	set softtabstop=2
	set expandtab
	set breakindent
	set noshiftround
	
	" Cursor motion
	set scrolloff=3
	set backspace=indent,eol,start
	set matchpairs+=<:> " use % to jump between pairs
	
	" Rendering
	set ttyfast
	
	let python_highlight_all=1
	syntax on
	
	"*****************************************************************************
	"" Abbreviations
	"*****************************************************************************
	"" no one is really happy until you have this shortcuts
	cnoreabbrev W! w!
	cnoreabbrev Q! q!
	cnoreabbrev q1 q!
	cnoreabbrev w1 w!
	cnoreabbrev Qall! qall!
	cnoreabbrev Wq wq
	cnoreabbrev Wa wa
	cnoreabbrev wQ wq
	cnoreabbrev WQ wq
	cnoreabbrev W w
	cnoreabbrev Q q
	cnoreabbrev Qall qall
	cabbrev t tabnew
	nnoremap ; :
	vnoremap ; :
	
	
	"*****************************************************************************
	"" Commands
	"*****************************************************************************
	" remove trailing whitespaces
	command! FixWhitespace :%s/\s\+$//e
	
	"*****************************************************************************
	"" Convenience variables
	"*****************************************************************************
	
	" Reload icons after init source
	if exists('g:loaded_webdevicons')
	  call webdevicons#refresh()
	endif
	
	
	"*****************************************************************************
	"" Autocmd Rules
	"*****************************************************************************
	"" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
	augroup vimrc-sync-fromstart
	  autocmd!
	  autocmd BufEnter * :syntax sync maxlines=200
	augroup END
	
	"" Remember cursor position
	augroup vimrc-remember-cursor-position
	  autocmd!
	  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
	augroup END
	
	"" txt
	augroup vimrc-wrapping
	  autocmd!
	  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
	augroup END
	
	"" make/cmake
	augroup vimrc-make-cmake
	  autocmd!
	  autocmd FileType make setlocal noexpandtab
	  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
	augroup END
	
	set autoread
	
	
	" ============================================================================ "
	" ===                      CUSTOM COLORSCHEME CHANGES                      === "
	" ============================================================================ "
	"
	colorscheme neodark
	" Add custom highlights in method that is executed every time a colorscheme is sourced
	" See https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f for details
	" function! s:custom_jarvis_colors()
	  " " coc.nvim color changes
	  " colorscheme gruvbox
	  " hi link CocErrorSign WarningMsg
	  " hi link CocWarningSign Number
	  " hi link CocInfoSign Type
	
	  " " Make background transparent for many things
	  " hi Normal ctermbg=NONE guibg=NONE
	  " " hi NonText ctermbg=NONE guibg=NONE
	  " hi LineNr ctermfg=NONE guibg=NONE
	  " hi SignColumn ctermfg=NONE guibg=NONE
	  " hi StatusLine guifg=#16252b guibg=#6699CC
	  " hi StatusLineNC guifg=#16252b guibg=#16252b
	
	  " " Try to hide vertical spit and end of buffer symbol
	  " " hi VertSplit gui=NONE guifg=#17252c guibg=#17252c
	  " " hi EndOfBuffer ctermbg=NONE ctermfg=NONE guibg=#17252c guifg=#17252c
	
	  " " Make background color transparent for git changes
	  " hi SignifySignAdd guibg=NONE
	  " hi SignifySignDelete guibg=NONE
	  " hi SignifySignChange guibg=NONE
	
	  " " Highlight git change signs
	  " hi SignifySignAdd guifg=#99c794
	  " hi SignifySignDelete guifg=#ec5f67
	  " hi SignifySignChange guifg=#c594c5
	" endfunction
	
	" autocmd! ColorScheme * call TrailingSpaceHighlights()
	" autocmd! ColorScheme * call s:custom_jarvis_colors()
	" call s:custom_jarvis_colors()
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
	let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
	
5f9b6b8f52b9013f9deaa879f1a31b46|file:///Users/dinhmai/.config/nvim/key-mapping.vim|18|1|V|vim
	
	"" Tabs
	nnoremap <Tab> gt
	nnoremap <S-Tab> gT
	nnoremap <silent> <S-t> :tabnew<CR>
	
	" map dir
	nnoremap <leader>. :lcd %:p:h<CR>
	"" Opens a tab edit command with the path of the currently edited file filled
	noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>
	" Delete current visual selection and dump in black hole buffer before pasting
	" Used when you want to paste over something without it getting copied to
	" Vim's default buffer
	vnoremap <leader>p "_dP
	noremap YY "+y<CR>
	" noremap <leader>p "+gP<CR>
	noremap XX "+x<CR>
	
	"" Buffer nav
	noremap <leader>z :bp<CR>
	noremap <leader>q :bp<CR>
	noremap <leader>x :bn<CR>
	noremap <leader>w :bn<CR>
	
	"" Close buffer
	noremap <leader>c :bd<CR>
	
	"" Clean search (highlight)
	nnoremap <silent> <leader><space> :noh<cr>
	"" Vmap for maintain Visual Mode after shifting > and <
	vmap < <gv
	vmap > >gv
	
	"" Move visual block
	vnoremap J :m '>+1<CR>gv=gv
	vnoremap K :m '<-2<CR>gv=gv
	
	
	" Disable visualbell
	set noerrorbells visualbell t_vb=
	if has('autocmd')
	  autocmd GUIEnter * set visualbell t_vb=
	endif
	
	" Copy/Paste/Cut
	" if has('unnamedplus')
	  " set clipboard=unnamed,unnamedplus
	" endif
	
	nmap ev :tabedit $MYVIMRC<CR>
	
	if has('macunix')
	  " pbcopy for OSX copy/paste
	  vmap <C-x> :!pbcopy<CR>
	  vmap <C-c> :w !pbcopy<CR><CR>
	endif
	
	" Split window
	nmap ss :split<Return><C-w>w
	nmap sv :vsplit<Return><C-w>w
	
	" python excue
	" nnoremap <buffer> <F9> :exec '!python' shellescape(@%, 1)<cr>
	nnoremap <F9> :w<CR>:exec '!python' shellescape(@%, 1)<cr>
	"ZZ to :w, ZX to :wq
	noremap zz :w<CR>
	noremap zx :wq<CR>
	noremap XXX :q!<CR>
	nnoremap <space>t :!open -a /Applications/iTerm.app .<cr>
	
	
	" //****************************************************************************//
	" //                               Plugin settings                              //
	" //****************************************************************************//
	
	"" Git
	noremap <Leader>ga :Gwrite<CR>
	noremap <Leader>gc :Gcommit<CR>
	noremap <Leader>gsh :Gpush<CR>
	noremap <Leader>glhl :Gpull<CR>
	noremap <Leader>gs :Gstatus<CR>
	noremap <Leader>gb :Gblame<CR>
	noremap <Leader>gd :Gvdiff<CR>
	noremap <Leader>gr :Gremove<CR>
	" session management
	nnoremap <leader>so :OpenSession<Space>
	nnoremap <leader>ss :SaveSession<Space>
	nnoremap <leader>sd :DeleteSession<CR>
	nnoremap <leader>sc :CloseSession<CR>
	"" Set working directory
	
	"Recovery commands from history through FZF
	nmap <leader>y :History:<CR>
	"" Open current line on GitHub
	nnoremap <Leader>o :.Gbrowse<CR>
	nnoremap <silent> <leader>b :Buffers<CR>
	nnoremap <silent> <leader>e :GFiles<CR>
	" nnoremap <silent> <C-e> :GFiles<CR>
	" Allows you to save files you opened without write permissions via sudo
	cmap w!! w !sudo tee %
	
	" === vim-jsdoc shortcuts ==="
	" Generate jsdoc for function under cursor
	nmap <leader>z :JsDoc<CR>
	
	let g:vcoolor_map = '<C-c>'
	let g:user_emmet_expandabbr_key='<C-z>'
	
	" easymotion
	map <Leader> <Plug>(easymotion-prefix)
	nmap s <Plug>(easymotion-overwin-f2)
	" Move to line
	map <Leader>L <Plug>(easymotion-bd-jk)
	nmap <Leader>L <Plug>(easymotion-overwin-line)
	" Move to word
	map  <Leader>w <Plug>(easymotion-bd-w)
	nmap <Leader>w <Plug>(easymotion-overwin-w)
	map  N <Plug>(easymotion-prev)
	map  / <Plug>(easymotion-sn)
	omap / <Plug>(easymotion-tn)
	map  n <Plug>(easymotion-next)
	" transprent bg
	"hi Normal guibg=NONE ctermbg=NONE
	
	nmap <space>e :CocCommand explorer<CR>
	
	" frame command
	nmap <space>f :CommentFrameHashDash ""<Left>
	let g:multi_cursor_select_all_word_key = '<space>n'
	
	map <leader>s :sort<CR>
	map <leader>su :%sort u<CR>
	map <leader>sr :%sort!<CR>
	
	nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
9f318d2b16d37f1ba75f938631e8d2ef|file:///Users/dinhmai/.config/nvim/key-mapping.vim|45|1|V|vim
	"" Clean search (highlight)
	nnoremap <silent> <leader><space> :noh<cr>
	"" Vmap for maintain Visual Mode after shifting > and <
	vmap < <gv
	vmap > >gv
	
	"" Move visual block
	vnoremap J :m '>+1<CR>gv=gv
	vnoremap K :m '<-2<CR>gv=gv
	
	
	" Disable visualbell
	set noerrorbells visualbell t_vb=
	if has('autocmd')
	  autocmd GUIEnter * set visualbell t_vb=
	endif
	
	" Copy/Paste/Cut
	" if has('unnamedplus')
	  " set clipboard=unnamed,unnamedplus
	" endif
	
	nmap ev :tabedit $MYVIMRC<CR>
	
	if has('macunix')
	  " pbcopy for OSX copy/paste
	  vmap <C-x> :!pbcopy<CR>
	  vmap <C-c> :w !pbcopy<CR><CR>
	endif
	
	" Split window
	nmap ss :split<Return><C-w>w
	nmap sv :vsplit<Return><C-w>w
	
	" python excue
	" nnoremap <buffer> <F9> :exec '!python' shellescape(@%, 1)<cr>
	nnoremap <F9> :w<CR>:exec '!python' shellescape(@%, 1)<cr>
	"ZZ to :w, ZX to :wq
	noremap zz :w<CR>
	noremap zx :wq<CR>
	noremap XXX :q!<CR>
	nnoremap <space>t :!open -a /Applications/iTerm.app .<cr>
	
	
	" //****************************************************************************//
	" //                               Plugin settings                              //
	" //****************************************************************************//
	
	"" Git
	noremap <Leader>ga :Gwrite<CR>
	noremap <Leader>gc :Gcommit<CR>
	noremap <Leader>gsh :Gpush<CR>
	noremap <Leader>glhl :Gpull<CR>
	noremap <Leader>gs :Gstatus<CR>
	noremap <Leader>gb :Gblame<CR>
	noremap <Leader>gd :Gvdiff<CR>
	noremap <Leader>gr :Gremove<CR>
	" session management
	nnoremap <leader>so :OpenSession<Space>
	nnoremap <leader>ss :SaveSession<Space>
	nnoremap <leader>sd :DeleteSession<CR>
	nnoremap <leader>sc :CloseSession<CR>
	"" Set working directory
	
	"Recovery commands from history through FZF
	nmap <leader>y :History:<CR>
	"" Open current line on GitHub
	nnoremap <Leader>o :.Gbrowse<CR>
	nnoremap <silent> <leader>b :Buffers<CR>
	nnoremap <silent> <leader>e :GFiles<CR>
	" nnoremap <silent> <C-e> :GFiles<CR>
	" Allows you to save files you opened without write permissions via sudo
	cmap w!! w !sudo tee %
	
	" === vim-jsdoc shortcuts ==="
	" Generate jsdoc for function under cursor
	nmap <leader>z :JsDoc<CR>
	
	let g:vcoolor_map = '<C-c>'
	let g:user_emmet_expandabbr_key='<C-z>'
	
	" easymotion
	map <Leader> <Plug>(easymotion-prefix)
	nmap s <Plug>(easymotion-overwin-f2)
	" Move to line
	map <Leader>L <Plug>(easymotion-bd-jk)
	nmap <Leader>L <Plug>(easymotion-overwin-line)
	" Move to word
	map  <Leader>w <Plug>(easymotion-bd-w)
	nmap <Leader>w <Plug>(easymotion-overwin-w)
	map  N <Plug>(easymotion-prev)
	map  / <Plug>(easymotion-sn)
	omap / <Plug>(easymotion-tn)
	map  n <Plug>(easymotion-next)
	" transprent bg
	"hi Normal guibg=NONE ctermbg=NONE
	
	nmap <space>e :CocCommand explorer<CR>
	
	" frame command
	nmap <space>f :CommentFrameHashDash ""<Left>
	let g:multi_cursor_select_all_word_key = '<space>n'
	
	map <leader>s :sort<CR>
	map <leader>su :%sort u<CR>
	map <leader>sr :%sort!<CR>
	
	nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
cd6cac388a5992bf343be15150ef8155|file:///Users/dinhmai/.config/nvim/key-mapping.vim|48|1|V|vim
	vmap < <gv
	vmap > >gv
	
	"" Move visual block
	vnoremap J :m '>+1<CR>gv=gv
	vnoremap K :m '<-2<CR>gv=gv
	
	
	" Disable visualbell
	set noerrorbells visualbell t_vb=
	if has('autocmd')
	  autocmd GUIEnter * set visualbell t_vb=
	endif
	
	" Copy/Paste/Cut
	" if has('unnamedplus')
	  " set clipboard=unnamed,unnamedplus
	" endif
	
	nmap ev :tabedit $MYVIMRC<CR>
	
	if has('macunix')
	  " pbcopy for OSX copy/paste
	  vmap <C-x> :!pbcopy<CR>
	  vmap <C-c> :w !pbcopy<CR><CR>
	endif
	
	" Split window
	nmap ss :split<Return><C-w>w
	nmap sv :vsplit<Return><C-w>w
	
	" python excue
	" nnoremap <buffer> <F9> :exec '!python' shellescape(@%, 1)<cr>
	nnoremap <F9> :w<CR>:exec '!python' shellescape(@%, 1)<cr>
	"ZZ to :w, ZX to :wq
	noremap zz :w<CR>
	noremap zx :wq<CR>
	noremap XXX :q!<CR>
	nnoremap <space>t :!open -a /Applications/iTerm.app .<cr>
	
	
	" //****************************************************************************//
	" //                               Plugin settings                              //
	" //****************************************************************************//
	
	"" Git
	noremap <Leader>ga :Gwrite<CR>
	noremap <Leader>gc :Gcommit<CR>
	noremap <Leader>gsh :Gpush<CR>
	noremap <Leader>glhl :Gpull<CR>
	noremap <Leader>gs :Gstatus<CR>
	noremap <Leader>gb :Gblame<CR>
	noremap <Leader>gd :Gvdiff<CR>
	noremap <Leader>gr :Gremove<CR>
	" session management
	nnoremap <leader>so :OpenSession<Space>
	nnoremap <leader>ss :SaveSession<Space>
	nnoremap <leader>sd :DeleteSession<CR>
	nnoremap <leader>sc :CloseSession<CR>
	"" Set working directory
	
	"Recovery commands from history through FZF
	nmap <leader>y :History:<CR>
	"" Open current line on GitHub
	nnoremap <Leader>o :.Gbrowse<CR>
	nnoremap <silent> <leader>b :Buffers<CR>
	nnoremap <silent> <leader>e :GFiles<CR>
	" nnoremap <silent> <C-e> :GFiles<CR>
	" Allows you to save files you opened without write permissions via sudo
	cmap w!! w !sudo tee %
	
	" === vim-jsdoc shortcuts ==="
	" Generate jsdoc for function under cursor
	nmap <leader>z :JsDoc<CR>
	
	let g:vcoolor_map = '<C-c>'
	let g:user_emmet_expandabbr_key='<C-z>'
	
	" easymotion
	map <Leader> <Plug>(easymotion-prefix)
	nmap s <Plug>(easymotion-overwin-f2)
	" Move to line
	map <Leader>L <Plug>(easymotion-bd-jk)
	nmap <Leader>L <Plug>(easymotion-overwin-line)
	" Move to word
	map  <Leader>w <Plug>(easymotion-bd-w)
	nmap <Leader>w <Plug>(easymotion-overwin-w)
	map  N <Plug>(easymotion-prev)
	map  / <Plug>(easymotion-sn)
	omap / <Plug>(easymotion-tn)
	map  n <Plug>(easymotion-next)
	" transprent bg
	"hi Normal guibg=NONE ctermbg=NONE
	
	nmap <space>e :CocCommand explorer<CR>
	
	" frame command
	nmap <space>f :CommentFrameHashDash ""<Left>
	let g:multi_cursor_select_all_word_key = '<space>n'
	
	map <leader>s :sort<CR>
	map <leader>su :%sort u<CR>
	map <leader>sr :%sort!<CR>
	
	nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
9a7fa324c2f061ce4d0be780e54737b2|file:///Users/dinhmai/.config/nvim/key-mapping.vim|51|1|V|vim
	"" Move visual block
	vnoremap J :m '>+1<CR>gv=gv
	vnoremap K :m '<-2<CR>gv=gv
	
	
	" Disable visualbell
	set noerrorbells visualbell t_vb=
	if has('autocmd')
	  autocmd GUIEnter * set visualbell t_vb=
	endif
	
	" Copy/Paste/Cut
	" if has('unnamedplus')
	  " set clipboard=unnamed,unnamedplus
	" endif
	
	nmap ev :tabedit $MYVIMRC<CR>
	
	if has('macunix')
	  " pbcopy for OSX copy/paste
	  vmap <C-x> :!pbcopy<CR>
	  vmap <C-c> :w !pbcopy<CR><CR>
	endif
	
	" Split window
	nmap ss :split<Return><C-w>w
	nmap sv :vsplit<Return><C-w>w
	
	" python excue
	" nnoremap <buffer> <F9> :exec '!python' shellescape(@%, 1)<cr>
	nnoremap <F9> :w<CR>:exec '!python' shellescape(@%, 1)<cr>
	"ZZ to :w, ZX to :wq
	noremap zz :w<CR>
	noremap zx :wq<CR>
	noremap XXX :q!<CR>
	nnoremap <space>t :!open -a /Applications/iTerm.app .<cr>
	
	
	" //****************************************************************************//
	" //                               Plugin settings                              //
	" //****************************************************************************//
	
	"" Git
	noremap <Leader>ga :Gwrite<CR>
	noremap <Leader>gc :Gcommit<CR>
	noremap <Leader>gsh :Gpush<CR>
	noremap <Leader>glhl :Gpull<CR>
	noremap <Leader>gs :Gstatus<CR>
	noremap <Leader>gb :Gblame<CR>
	noremap <Leader>gd :Gvdiff<CR>
	noremap <Leader>gr :Gremove<CR>
	" session management
	nnoremap <leader>so :OpenSession<Space>
	nnoremap <leader>ss :SaveSession<Space>
	nnoremap <leader>sd :DeleteSession<CR>
	nnoremap <leader>sc :CloseSession<CR>
	"" Set working directory
	
	"Recovery commands from history through FZF
	nmap <leader>y :History:<CR>
	"" Open current line on GitHub
	nnoremap <Leader>o :.Gbrowse<CR>
	nnoremap <silent> <leader>b :Buffers<CR>
	nnoremap <silent> <leader>e :GFiles<CR>
	" nnoremap <silent> <C-e> :GFiles<CR>
	" Allows you to save files you opened without write permissions via sudo
	cmap w!! w !sudo tee %
	
	" === vim-jsdoc shortcuts ==="
	" Generate jsdoc for function under cursor
	nmap <leader>z :JsDoc<CR>
	
	let g:vcoolor_map = '<C-c>'
	let g:user_emmet_expandabbr_key='<C-z>'
	
	" easymotion
	map <Leader> <Plug>(easymotion-prefix)
	nmap s <Plug>(easymotion-overwin-f2)
	" Move to line
	map <Leader>L <Plug>(easymotion-bd-jk)
	nmap <Leader>L <Plug>(easymotion-overwin-line)
	" Move to word
	map  <Leader>w <Plug>(easymotion-bd-w)
	nmap <Leader>w <Plug>(easymotion-overwin-w)
	map  N <Plug>(easymotion-prev)
	map  / <Plug>(easymotion-sn)
	omap / <Plug>(easymotion-tn)
	map  n <Plug>(easymotion-next)
	" transprent bg
	"hi Normal guibg=NONE ctermbg=NONE
	
	nmap <space>e :CocCommand explorer<CR>
	
	" frame command
	nmap <space>f :CommentFrameHashDash ""<Left>
	let g:multi_cursor_select_all_word_key = '<space>n'
	
	map <leader>s :sort<CR>
	map <leader>su :%sort u<CR>
	map <leader>sr :%sort!<CR>
	
	nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
49bd12b515c15f0e90449c4759768f4a|file:///Users/dinhmai/.config/nvim/key-mapping.vim|135|1|V|vim
	map  N <Plug>(easymotion-prev)
	map  / <Plug>(easymotion-sn)
	omap / <Plug>(easymotion-tn)
	map  n <Plug>(easymotion-next)
	" transprent bg
	"hi Normal guibg=NONE ctermbg=NONE
	
	nmap <space>e :CocCommand explorer<CR>
	
	" frame command
	nmap <space>f :CommentFrameHashDash ""<Left>
	let g:multi_cursor_select_all_word_key = '<space>n'
	
	map <leader>s :sort<CR>
	map <leader>su :%sort u<CR>
	map <leader>sr :%sort!<CR>
	
	nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
cdd90d48d898568b775588f7d2cae703|untitled:1|1|1|V|
	map  / <Plug>(easymotion-sn)
5cea65a778c6935817904f839e589271|untitled:1|1|1|V|
	omap / <Plug>(easymotion-tn)
9741968c92d88e596bcb39c2d18726c1|untitled:1|1|1|V|
	" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
bae243204ca58270a9ac4979a5581bd9|untitled:1|1|1|V|
	" Without these mappings, `n` & `N` works fine. (These mappings just provide
6b65830890f4a5c6d9b4fb3300eda70e|untitled:1|1|1|V|
	" different highlight method and have some other features )
ef7885c559e0543d021b63a2c618b01e|untitled:1|1|1|V|
	map  n <Plug>(easymotion-next)
1cbf0766c5d4c2f589284ccd549db57d|untitled:1|1|1|V|
	map  N <Plug>(easymotion-prev)
3cc62c5674af3f3913ec9e472179fc8e|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/screens/home-screen/home-screen.tsx|106|15|v|typescriptreact
	setRegion
244deaadc66e8b6f76d69b8042b8d27d|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/screens/home-screen/home-screen.tsx|88|1|V|typescriptreact
	  return (
	    <Screen preset="scroll">
	      <Header
	        headerTx="homeScreen.header"
	        onLeftPress={() => props.navigation.navigate("authStack")}
	      />
	      <View style={styles.container}>
	        {location !== null && (
	          <AppMapView
	            // region={{
	            // latitude: location.coords.latitude,
	            // longitude: location.coords.longitude,
	            // latitudeDelta: 0.003,
	            // longitudeDelta: 0.003,
	            // }}
	            markers={markers}
	            region={region}
	            onRegionChangeComplete={r => {
	              setRegion(r)
	            }}
	          />
	        )}
	      </View>
	    </Screen>
	  )
	})
3e01a9c0954b4e37216d2267a0d85927|file:///Users/dinhmai/workplace/project/uit/bowie/mobile/app/screens/home-screen/home-screen.tsx|106|15|v|typescriptreact
	setRegion(
69167133cbab9fd8e204057818ad90c3|file:///Users/dinhmai/.config/nvim/init.vim|179|13|v|vim
	neodark
cd99ae605183e88ccaf6c32002e09b6a|file:///Users/dinhmai/.config/nvim/init.vim|179|13|v|vim
	oceanicnext 
3356685ead6b0ffc5297fee354e2a904|file:///Users/dinhmai/.config/nvim/init.vim|179|13|v|vim
	OceanicNext
44aec5c90998c729635347147dce882e|untitled:1|1|1|V|
	dfasd
3bb181520e39a9052b7fb380cd157a3d|file:///Users/dinhmai/.config/nvim/init.vim|215|22|v|vim
	OceanicNext 
877380302278c852bc2fe4728ee1d878|file:///Users/dinhmai/.config/nvim/init.vim|184|3|V|vim
	  colorscheme gruvbox
b73376fee7c807dd97b1569be9e5b841|file:///Users/dinhmai/.config/nvim/init.vim|183|3|V|vim
	  " coc.nvim color changes
7a8040f99fcd61ce51b3cf8e3ef78f0b|file:///Users/dinhmai/.config/nvim/init.vim|189|3|V|vim
	  let g:neodark#background = '#202020'
933a3cde50f232f9f2eb3ef106a7b2d4|untitled:1|1|1|V|
	asfda
28e09f90c74a91140ea4949355783f7c|file:///Users/dinhmai/.config/nvim/init.vim|220|1|V|vim
	let g:lightline.colorscheme = 'neodark'
5d41402abc4b2a76b9719d911017c592|untitled:1|1|1|V|
	hello
fcf0b94e8ff0a18cf983384d97f4ac72|file:///Users/dinhmai/.config/nvim/init.vim|222|1|V|vim
	highlight Normal ctermbg=none
454b517a467da88fc7dd8e2f1bb806bc|file:///Users/dinhmai/.config/nvim/init.vim|222|1|V|vim
	highlight NonText ctermbg=none
dc80ab92f1a2a4909e5bf76faea02d19|file:///Users/dinhmai/.config/nvim/init.vim|222|1|V|vim
	au ColorScheme * hi Normal ctermbg=none guibg=none
