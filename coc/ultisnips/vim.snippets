# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
# snippet cmstp "const map state to props"
# const mapStateToProps=state=>state;
# endsnippet

# snippet mstp "map state to props"
# const mapStateToProps=(state)=>{
	# return {
		# $1: $2
	# }
# }
# endsnippet

# snippet imp "import default file"
# import ${2: $1 } from '${1}'
# endsnippet

# snippet impd "Destructuring import"
# import {$2 } from '$1'
# endsnippet

# snippet (console|log|cl|cls|ls) "console.log"
# console.log('${2:$1: }', ${1});
# endsnippet

# snippet (tl) "console.log"
# console.log('${2:$1: }', ${1});
# endsnippet

# snippet (lss) "console.log"
# console.log('${2:$1: }', ${1});
# endsnippet

# snippet (tl) "console.tlog"
# console.tlog('${2:$1: }', ${1});
# endsnippet

# snippet style " create styel file"
# import { StyleSheet } from 'react-native'

# export default StyleSheet.create({
	# container:{}
# })
# endsnippet

# snippet ims "import styled-components"
# import styled from 'styled-components'
# endsnippet

# snippet dop " destructoring props"
# const { $1 } = props;
# endsnippet


# snippet dos " destructoring states"
# const { $1 } = this.state;
# endsnippet

# snippet dob " destructoring states"
# const { $2 } = $1 ;
# endsnippet

# snippet doh " destructoring hook"
# const [ $2, set$2 ] = $1 ;
# endsnippet



# snippet exd "export * from"
# export * from './$1'
# endsnippet

# snippet dp "default props"
# ${1:`!v expand('%:t:r')`}.defaultProps = {
	# $2
# }
# endsnippet

# snippet tls "tron log string"
# console.tron.log('$1')
# endsnippet

# snippet tl "tron log"
# console.tron.log('$1', $1)
# endsnippet

# snippet int "interface"
# export interface $1 {
	# $2
# }
# endsnippet

# snippet rnft "create react native stateless in ts"
# import React, { useState } from 'react'
# import { Text, View, StyleSheet } from 'react-native'

# interface Props { 

# }

# export function ${1:`!v expand('%:t:r')`}({}: Props){
		# return (
			# <${3:View}>
				# <Text>123 </Text>
			# </$3>
		# );
# }

# const styles= StyleSheet.create({
	# container:{}
# })

# export default $1;

# endsnippet



# snippet cstyles " const style"
# import { StyleSheet } from 'react-native'

# const styles= StyleSheet.create({
	# container:{}
# })

# endsnippet


# snippet dp " destructoring props"
# const { $1 } = this.props;
# endsnippet


# snippet ds " destructoring states"
# const { $1 } = this.state;
# endsnippet

# snippet dob " destructoring "
# const { $2 } = $1;
# endsnippet

# snippet cmt "cmt"
# /* ------------- $1 ------------- */
# endsnippet

# snippet tl "tronlog"
# console.tron.log(" $1 ", $1)
# endsnippet

# snippet tl "cl"
# console.log(" $1 ")
# endsnippet

# snippet rdf "render formik form" 
# render$1 = ({} : FormikProps<FormValues>) => {}
# endsnippet

# snippet styled "styled component" 
# const Styled$1= styled($2)`$3`
# endsnippet

# snippet exp "export * from" 
# export * from './$1'
# endsnippet

# snippet iproduce "Immer creating producer" b
# const nextState = produce(baseState, draftState => {
    # draftState.push({todo: "Tweet about it"})
    # draftState[1].done = true
# })
# endsnippet

# snippet useEffect "useEffect" 
  # useEffect(()=>{
		# $1
  # },[$2])

# endsnippet


# snippet us.s "useState" w
# const [$1, set${1/\w+\s*/\u$0/g}] = useState(${3:''})${0:;}
# endsnippet

# snippet us.e "useEffect" w
# useEffect(() => {
  # $1
# })${0:;}
# endsnippet

# snippet us.er "useEffect with return" w
# useEffect(() => {
  # $1
	# return () => {
    # $2
	# };
# })${0:;}
# endsnippet

# snippet us.c "useContext" w
# const $1 = useContext($2)${0:;}
# endsnippet

# snippet us.r "useReducer" w
# const [$1, dispatch] = useReducer($1Reducer, ${2:${VISUAL:initialState}})
# const $1Reducer = (state, action) => {
	# switch (action.type) {
		# default:
			# return state;
	# }
# }${0:;}
# endsnippet

# snippet us.cb "useCallback" w
# useCallback(
	# () => {
		# $1
	# },
	# [$2],
# )${0:;}
# endsnippet

# snippet us.m "useMemo" w
# const $1 = useMemo(() => {
	# $2
# }, [$3])${0:;}
# endsnippet

# snippet us.rf "useRef" w
# const $1 = useRef($2)${0:;}
# endsnippet

# snippet dot "destructoring state"
# const { $1 } = this.state
# endsnippet

# snippet dot "destructoring props"
# const { $1 } = this.props
# endsnippet

# snippet lodash "import lodash"
# import _ from 'lodash'
# endsnippet

# snippet dp "defaultProps classs"
# `!v expand('%:t:r')`.defaultProps={
	# $1
# }
# endsnippet

# snippet fc "functions" 

# interface $1Props{

# }

# const $1: React.FC<$1Props> = ({  }) =>{
	# return (
		# <div>
			# 123
		# </div>
	# )
# }
# endsnippet


# snippet rf "create react hook"
# import React from 'react'

# export const ${1:`!v expand('%:t:r')`}: React.FC = ({  }) =>{
	# return (
		# <div>
			# 123
		# </div>
	# )
# }
# endsnippet

# snippet rff "create react hook"
# import React from 'react'

# interface Props{

# }

# export const ${1:`!v expand('%:t:r')`}: React.FC<Props> = ({  }) =>{
	# return (
		# <div>
			# 123
		# </div>
	# )
# }
# endsnippet

# snippet canimated "Animated" 
# const { Value, clockRunning, spring, cond, startClock ,stopClock, set,block } = Animated
# endsnippet
