# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet exd "export * from"
export * from './$1'
endsnippet



snippet process "Description" 
process.env.PUBLIC_URL
endsnippet

snippet imp "import " 
import { $2 } from '$1'
endsnippet

snippet impd "import default" 
import * as $2 from '$1'
endsnippet


#------------------------------------------------------------------------------#
#                                    graphql                                   #
#------------------------------------------------------------------------------#
snippet entity "Create entity" 
import { Field, ObjectType } from 'type-graphql'
import { BaseEntity, Column, Entity, ObjectID, ObjectIdColumn } from 'typeorm'

@ObjectType()
@Entity()
export class $1 extends BaseEntity {
	@ObjectIdColumn()
	id: ObjectID

	@Field()
	@Column('text', { unique: true })
	email: string
}
endsnippet

snippet resolver "create resolvers"
import { Query, Resolver, UseMiddleware } from 'type-graphql'
import { isAuth } from '../middleware/isAuth'

@Resolver()
export class $1 {
	@Query(() => String)
	@UseMiddleware(isAuth)
	book() {
		return 'The Republic'
	}
}
endsnippet

snippet input "Input" 
import { InputType, Field } from 'type-graphql'

@InputType()
export class $1{
	@Field()
	name: string
}
endsnippet

snippet manager "dob mongoManager" 
const manager = getMongoManager() 
endsnippet

snippet gmu "graphql mutation" 
@Mutation(() => $1)
async createPhoto(
	@Arg('input') { }: $2,
): Promise<$1> {
	const manager = DI.em.getRepository() 

	return { }
}
endsnippet


snippet mutation "graphql mutation" 
@Mutation(() => $1)
async createPhoto(
	@Arg('input') { }: $2,
): Promise<$1> {
	const manager = DI.em.getRepository() 

	return { }
}
endsnippet

snippet query "graphql query" 
@Query(() => $1)
async createPhoto(
	@Arg('input') { }: $2,
): Promise<$1> {
	const manager = DI.em.getRepository() 

	return { }
}
endsnippet



snippet field "create field" 
@Field()
@Property()
$1
endsnippet

snippet tfield "create field without column" 
@Field()
$1
endsnippet


