# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet cmstp "const map state to props"
const mapStateToProps=state=>state;
endsnippet

snippet mstp "map state to props"
const mapStateToProps=(state)=>{
	return {
		$1: $2
	}
}
endsnippet

snippet imp "import default file"
import ${2: $1 } from '${1}'
endsnippet

snippet impd "Destructuring import"
import {
	$2
} from '$1'
endsnippet

snippet (cl) "console.log"
console.log('${2:$1: }', ${1});
endsnippet


snippet style " create styel file"
import { StyleSheet } from 'react-native'

export default StyleSheet.create({
	container:{}
})
endsnippet

snippet ims "import styled-components"
import styled from 'styled-components'
endsnippet

snippet dop " destructoring props"
const { $1 } = props;
endsnippet


snippet dos " destructoring states"
const { $1 } = state;
endsnippet

snippet dob " destructoring states"
const { $2 } = $1 ;
endsnippet

snippet exd "export * from"
export * from './$1'
endsnippet

snippet dp "default props"
${1:`!v expand('%:t:r')`}.defaultProps={
	$1
}
endsnippet

snippet ctls "tron log string"
console.tron.log('$1')
endsnippet

snippet ctl "tron log"
console.tron.log('$1', $1)
endsnippet

snippet tl "tron log"
console.tlog('$1', $1)
endsnippet

snippet rnce "create react native full component snip"
import React, { Component } from 'react'
import { Text, View } from 'react-native'
import { I$1, I$1State } from './$1.presets.tsx'
import {  } from './$1.props.tsx'

export class ${1:`!v expand('%:t:r')`} extends Component <I$1,I$1State>{
	render() {
		return (
			<${3:View}>
				<Text>123 </Text>
			</$3>
		);
	}
}

export default $1;
endsnippet

snippet int "interface"
export interface $1 {
	$1
}
endsnippet

snippet story "story book default story"
import * as React from "react"
import { storiesOf } from "@storybook/react-native"
import { StoryScreen, Story, UseCase } from "../../../../../storybook/views"
import TradingItem from "./TradingItem"

declare var module

storiesOf("Trading history card", module)
  .addDecorator((fn) => <StoryScreen>{fn()}</StoryScreen>)
  .add("normal item", () => (
    <Story>
      <UseCase text="default" usage="default">
        <TradingItem />
      </UseCase>
    </Story>
  ))

endsnippet


snippet rnf "create react native stateless"
import React, { useState } from 'react'
import { Text, View, StyleSheet } from 'react-native'

interface  ${1:`!v expand('%:t:r')`}Props{
	
}

export const ${1:`!v expand('%:t:r')`}: React.FC<${1:`!v expand('%:t:r')`}Props> = ({})=>{
		return (
			<${3:View}>
				<Text>123 </Text>
			</$3>
		);
}

const styles= StyleSheet.create({
	container:{}
})

endsnippet

snippet rf "create react FunctionComponent"
import React from 'react'

interface  ${1:`!v expand('%:t:r')`}Props{
	
}

export const ${1:`!v expand('%:t:r')`}: React.FC<${1:`!v expand('%:t:r')`}Props> = (props) => {
		return (
			<${3:div}>
			</$3>
		);
}

endsnippet

snippet fc "function component" 
interface $1Props {
	$3
}

const $1: React.FC<$1Props> = () => {
	$4
}

endsnippet

snippet cstyles " const style"
import { StyleSheet } from 'react-native'

const styles= StyleSheet.create({
	container:{}
})

endsnippet


snippet dp " destructoring props"
const { $1 } = props;
endsnippet


snippet ds " destructoring states"
const { $1 } = state;
endsnippet

snippet dob " destructoring "
const { $2 } = $1;
endsnippet

snippet cmt "cmt"
/* ------------- $1 ------------- */
endsnippet

snippet clc "tronlog"
console.tron.log(" $1 ", $1)
endsnippet

snippet rdf "render formik form" 
render$1 = ({} : FormikProps<FormValues>) => {}
endsnippet

snippet styled "styled component" 
const Styled$1= styled($2)`$3`
endsnippet

snippet exp "export * from" 
export * from './$1'
endsnippet

snippet exp "export * from" 
export * from "./$1"
endsnippet

snippet styles "styles" 
const styles= StyleSheet.create({
	$1
})
endsnippet

snippet lodash "lodash" 
import "_" from "lodash"
endsnippet

snippet func "func const" 
const $1 = ( $2 ) => { $3 }
endsnippet


snippet useMemoOne "useMemoOne" 
const {} = useMemoOne(() => ({
	$1		
}),[])
endsnippet

snippet eslint "Description" b
// eslint-disable-next-line
endsnippet
snippet uss "useState" w
const [$1, set$2] = React.useState(${3:''})${0:;}
endsnippet

snippet use "useEffect" w
React.useEffect(() => {
  $1
})${0:;}
endsnippet

snippet user "useEffect with return" w
React.useEffect(() => {
  $1
	return () => {
    $2
	};
})${0:;}
endsnippet

snippet usc "useContext" w
const $1 = React.useContext($2)${0:;}
endsnippet

snippet uscb "useCallback" w
React.useCallback(
	() => {
		$1
	},
	[$2],
)${0:;}
endsnippet

snippet usm "useMemo" w
const $1 = React.useMemo(() => {
	$2
}, [$3])${0:;}
endsnippet

snippet usrf "useRef" w
const $1 = React.useRef($2)${0:;}
endsnippet


snippet useThemes "Description" 
const { color } = useThemes()
endsnippet

snippet cl "Description" 
console.log("$1", $1)
endsnippet


snippet useHistory "Description" 
const history = useHistory()
endsnippet


snippet v4 "v4" 
import { v4 } from 'uuid'
endsnippet

snippet process "Description" b
process.env.PUBLIC_URL
endsnippet

snippet icx "import classnames" 
import cx from "classnames"
endsnippet

snippet fragment "fragment" 
<>
	$1
</>
endsnippet

snippet muiBtn "mui button contained primary" b
<Button variant="contained" color="primary">$1</Button>
endsnippet

snippet muiUseStyles "create useStyle mui" b
import { makeStyles, createStyles } from "@material-ui/core"

const useStyles = makeStyles((theme: Theme) =>
	createStyles({
		$1	
	}),
)

endsnippet

snippet constfc "const fc" b
const $1 = () => {
	return null
}

endsnippet

snippet piscsum "photo piscsum" b
https://picsum.photos/350/350
endsnippet


snippet zustand "create zustand" 
interface $1State{

}

export const [$1] = create<$1State>(
	persist("$2")(
		immer((set: any,get: any)=>({
			$3
		}))
	)
)
endsnippet

snippet cx "className with cx" 
className={cx("$1")}
endsnippet

snippet class "className with cx" 
className={cx("$1")}
endsnippet

snippet className  "className with cx" 
className={cx("$1")}
endsnippet

snippet fca "function arrow without any param" 
() => { $1 }
endsnippet

snippet afc "function arrow without any param" 
() => { $1 }
endsnippet

snippet ()=> "function arrow without any param" 
() => { $1 }
endsnippet


