{
  "imp": {
    "prefix": "impd",
    "body": "import ${2: $1 } from '${1}'",
    "description": "import default file"
  },
  "impd": {
    "prefix": "imp",
    "body": "import {\n\t$2\n} from '$1'",
    "description": "Destructuring import"
  },
  "(cl)": {
    "prefix": "(cl)",
    "body": "console.log('${2:$1: }', ${1});",
    "description": "console.log"
  },
  "style": {
    "prefix": "style",
    "body": "import { StyleSheet } from 'react-native'\n\nexport default StyleSheet.create({\n\tcontainer:{}\n})",
    "description": " create styel file"
  },
  "ims": {
    "prefix": "ims",
    "body": "import styled from 'styled-components'",
    "description": "import styled-components"
  },
  "dob": {
    "prefix": "dob",
    "body": "const { $2 } = $1;",
    "description": " destructoring "
  },
  "dop": {
    "prefix": "dop",
    "body": "const { $2 } = state ;",
    "description": " destructoring state"
  },
  "exd": {
    "prefix": "exd",
    "body": "export * from './$1'",
    "description": "export * from"
  },
  "dp": {
    "prefix": "dp",
    "body": "const { $1 } = props;",
    "description": " destructoring props"
  },
  "ctls": {
    "prefix": "ctls",
    "body": "console.tron.log('$1')",
    "description": "tron log string"
  },
  "ctl": {
    "prefix": "ctl",
    "body": "console.tron.log('$1', $1)",
    "description": "tron log"
  },
  "tl": {
    "prefix": "tl",
    "body": "console.tlog('$1', $1)",
    "description": "tron log"
  },
  "rnce": {
    "prefix": "rnce",
    "body": "import React, { Component } from 'react'\nimport { Text, View } from 'react-native'\nimport { I$1, I$1State } from './$1.presets.tsx'\nimport {  } from './$1.props.tsx'\n\nexport class ${1:`!v expand('%:t:r')`} extends Component <I$1,I$1State>{\n\trender() {\n\t\treturn (\n\t\t\t<${3:View}>\n\t\t\t\t<Text>123 </Text>\n\t\t\t</$3>\n\t\t);\n\t}\n}\n\nexport default $1;",
    "description": "create react native full component snip"
  },
  "rnf": {
    "prefix": "rnf",
    "body": "import React, { useState } from 'react'\nimport { Text, View } from 'components'\nimport styled from 'styled-components'\n\ninterface  ${1:`!v expand('%:t:r')`}Props{\n\t\n}\n\nexport const ${1:`!v expand('%:t:r')`}: React.FC<${1:`!v expand('%:t:r')`}Props> = (props)=>{\n\t\treturn (\n\t\t\t<${3:View}>\n\t\t\t\t<Text>123 </Text>\n\t\t\t</$3>\n\t\t);\n}\n",
    "description": "create react native stateless"
  },
  "rf": {
    "prefix": "rf",
    "body": "import React from 'react'\n\ninterface  ${1:`!v expand('%:t:r')`}Props{\n\t\n}\n\nexport const ${1:`!v expand('%:t:r')`}: React.FC<${1:`!v expand('%:t:r')`}Props> = (props) => {\n\t\treturn (\n\t\t\t<${3:div}>\n\t\t\t</$3>\n\t\t);\n}\n",
    "description": "create react FunctionComponent"
  },
  "fc": {
    "prefix": "fc",
    "body": "interface $1Props {\n\t$3\n}\n\nconst $1: React.FC<$1Props> = () => {\n\t$4\n}\n",
    "description": "function component"
  },
  "ds": {
    "prefix": "ds",
    "body": "const { $1 } = state;",
    "description": " destructoring states"
  },
  "cmt": {
    "prefix": "cmt",
    "body": "/* ------------- $1 ------------- */",
    "description": "cmt"
  },
  "lodash": {
    "prefix": "lodash",
    "body": "import _ from \"lodash\"",
    "description": "lodash"
  },
  "func": {
    "prefix": "func",
    "body": "const $1 = ( $2 ) => { $3 }",
    "description": "func const"
  },
  "useMemoOne": {
    "prefix": "useMemoOne",
    "body": "const {} = useMemoOne(() => ({\n\t$1\t\t\n}),[])",
    "description": "useMemoOne"
  },
  "eslint": {
    "prefix": "eslint",
    "body": "// eslint-disable-next-line",
    "description": "Description"
  },
  "uss": {
    "prefix": "uss",
    "body": "const [$1, set${2:$1}] = React.useState(${3:''})",
    "description": "useState"
  },
  "use": {
    "prefix": "use",
    "body": "React.useEffect(() => {\n  $1\n},[])",
    "description": "useEffect"
  },
  "user": {
    "prefix": "user",
    "body": "React.useEffect(() => {\n  $1\n\treturn () => {\n    $2\n\t};\n},[])",
    "description": "useEffect with return"
  },
  "usc": {
    "prefix": "usc",
    "body": "const $1 = React.useContext($2)",
    "description": "useContext"
  },
  "uscb": {
    "prefix": "uscb",
    "body": "React.useCallback(\n\t() => {\n\t\t$1\n\t},\n\t[$2],\n)${0:;}",
    "description": "useCallback"
  },
  "usm": {
    "prefix": "usm",
    "body": "const $1 = React.useMemo(() => {\n\t$2\n}, [$3])",
    "description": "useMemo"
  },
  "usrf": {
    "prefix": "usrf",
    "body": "const $1 = React.useRef($2)",
    "description": "useRef"
  },
  "useThemes": {
    "prefix": "useThemes",
    "body": "const { color } = useThemes()",
    "description": "Description"
  },
  "cl": {
    "prefix": "cl",
    "body": "console.log(\"$1\", $1)",
    "description": "Description"
  },
  "useHistory": {
    "prefix": "useHistory",
    "body": "const history = useHistory()",
    "description": "Description"
  },
  "v4": {
    "prefix": "v4",
    "body": "import { v4 } from 'uuid'",
    "description": "v4"
  },
  "process": {
    "prefix": "process",
    "body": "process.env.PUBLIC_URL",
    "description": "Description"
  },
  "icx": {
    "prefix": "icx",
    "body": "import cx from \"classnames\"",
    "description": "import classnames"
  },
  "fragment": {
    "prefix": "fragment",
    "body": "<>\n\t$1\n</>",
    "description": "fragment"
  },
  "muiBtn": {
    "prefix": "muiBtn",
    "body": "<Button variant=\"contained\" color=\"primary\">$1</Button>",
    "description": "mui button contained primary"
  },
  "muiUseStyles": {
    "prefix": "muiUseStyles",
    "body": "import { makeStyles, createStyles } from \"@material-ui/core\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n\tcreateStyles({\n\t\t$1\t\n\t}),\n)\n",
    "description": "create useStyle mui"
  },
  "constfc": {
    "prefix": "constfc",
    "body": "const $1 = () => {\n\treturn null\n}\n",
    "description": "const fc"
  },
  "piscsum": {
    "prefix": "piscsum",
    "body": "https://picsum.photos/350/350",
    "description": "photo piscsum"
  },
  "zustand": {
    "prefix": "zustand",
    "body": "interface $1State{\n\n}\n\nexport const [$1] = create<$1State>(\n\tpersist(\"$2\")(\n\t\timmer((set: any,get: any)=>({\n\t\t\t$3\n\t\t}))\n\t)\n)",
    "description": "create zustand"
  },
  "cx": {
    "prefix": "cx",
    "body": "className={cx(\"$1\")}",
    "description": "className with cx"
  },
  "class": {
    "prefix": "class",
    "body": "className={(\"$1\")}",
    "description": "className with cx"
  },
  "className": {
    "prefix": "className",
    "body": "className={(\"$1\")}",
    "description": "className with cx"
  },
  "fca": {
    "prefix": "fca",
    "body": "() => { $1 }",
    "description": "function arrow without any param"
  },
  "afc": {
    "prefix": "afc",
    "body": "() => { $1 }",
    "description": "function arrow without any param"
  },
  "()=>": {
    "prefix": "()=>",
    "body": "() => { $1 }",
    "description": "function arrow without any param"
  },
  "Styled": {
    "prefix": "Styled",
    "body": "const Styled$1= styled.main.attrs({\n\tclassName: \"\",\n})``",
    "description": "Styled component with tailwind"
  },
  "lorem": {
    "prefix": "lorem",
    "body": "\"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour,\"",
    "description": "loremedium"
  },
  "loremshort": {
    "prefix": "loremshort",
    "body": "\"Lorem Ipsum is simply dummy text of the printing\"",
    "description": "short"
  },
  "loremlong": {
    "prefix": "loremlong",
    "body": "\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\"",
    "description": "lorem long"
  },
  "styled": {
    "prefix": "styled",
    "body": "const $1 = styled($2)(p=>({\n\t$3\n}))",
    "description": "const styled component"
  },
  "cstyled": {
    "prefix": "cstyled",
    "body": "const $1 = styled($2)(p=>({\n\t$3\n}))",
    "description": "const styled component"
  },
  "csty": {
    "prefix": "csty",
    "body": "const $1 = styled($2)(p=>({\n\t$3\n}))",
    "description": "const styled component"
  },
  "sd": {
    "prefix": "sd",
    "body": "const $1 = styled(${2:View})({\n\t$3\n})",
    "description": "const styled component"
  },
  "sdview": {
    "prefix": "sdview",
    "body": "const $1 = styled(View)({\n\t\n})",
    "description": "Styled view component"
  },
  "sdtext": {
    "prefix": "sdtext",
    "body": "const $1 = styled(Text)({\n\n})",
    "description": "Styled Text component"
  },
  "sdprops": {
    "prefix": "sdprops",
    "body": "${( p )=> \\`\n\t$1\n\\`}",
    "description": "styled props"
  },
  "jcmt": {
    "prefix": "jcmt",
    "body": "{/**----------- $1 ----------------*/}",
    "description": "jsxcommet"
  },
  "ira": {
    "prefix": "ira",
    "body": "import Animated, {\n\t// @ts-ignore\n\tuseAnimatedGestureHandler,\n\t// @ts-ignore\n\tuseAnimatedStyle,\n\t// @ts-ignore\n\tuseSharedValue,\n\t// @ts-ignore\n\twithSpring,\n} from \"react-native-reanimated\"",
    "description": "import reanimated"
  },
  "gestureHandler": {
    "prefix": "gestureHandler",
    "body": "const gestureHandler = useAnimatedGestureHandler({\n\t\tonStart: (_, ctx) => {\n\t\t\tctx.startX = x.value\n\t\t},\n\t\tonActive: (event, ctx) => {\n\t\t\tx.value = ctx.startX + event.translationX\n\t\t},\n\t\tonEnd: _ => {\n\t\t\tx.value = withSpring(0)\n\t\t},\n\t}",
    "description": "get gestureHandler"
  },
  "useAnimatedStyle": {
    "prefix": "useAnimatedStyle",
    "body": "const $1 = useAnimatedStyle(()=>{\n\treturn {\n\t\t$2\n\t}\n})",
    "description": "useAnimatedStyle"
  },
  "transform": {
    "prefix": "transform",
    "body": "transform: [{ $1 }, ],",
    "description": "transform style"
  },
  "sizedbox": {
    "prefix": "sizedbox",
    "body": "<SizedBox h={${1:4}} />",
    "description": "SizedBox"
  },
  "map": {
    "prefix": "map",
    "body": "{$1.map((v, i) => {\n\t$2\n})}",
    "description": "map jsx"
  },
  "antpage": {
    "prefix": "antpage",
    "body": "import { PageContainer } from '@ant-design/pro-layout'\nimport { Card } from 'antd'\nimport React from 'react'\n\nexport default (): React.ReactNode => {\n\treturn (\n\t\t<PageContainer>\n\t\t\t<Card></Card>\n\t\t</PageContainer>\n\t)\n}",
    "description": "ant new page"
  },
  "onError": {
    "prefix": "onError",
    "body": "const onError = (e) => enqueueSnackbar(e, { variant: \"warning\" })",
    "description": "onError create"
  },
  "loading": {
    "prefix": "loading",
    "body": "const loading = isFetching\nif(loading) return <AppLoading />\n",
    "description": "loading"
  }
}
